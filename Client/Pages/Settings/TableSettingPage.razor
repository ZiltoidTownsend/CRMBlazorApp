@using Client.Components.DropZone;
@using Client.Managers
@page "/TableSettingPage/{key}"

<h3>@Key</h3>
@* <MudSimpleTable Bordered="true" Class="overflow-hidden p-4">
    <thead class="d-flex flex-column">
        <tr class="d-flex">
            @for (int i = 0; i < _headersData.Count(); i++)
            {
                int index = i;
                <td class=@($"{GetClassForItemContainer(index)}") onmouseover=@(() => OnFocusHandler(index, true)) onmouseleave=@(() => OnFocusHandler(index, false))>
                    <div class="d-flex">
                        <MudIconButton Size="Size.Small" Style="width: 36px; height: 36px" Class=@GetClassForItem(index) Icon="@Icons.Material.Filled.Add" />
                        <MudText Align="@Align.Center" Class="align-self-lg-stretch flex-grow-1">@_headersData[index].DisplayValue</MudText>
                        <MudIconButton Style="width: 36px; height: 36px" Class=@GetClassForItem(index) Size="@Size.Small" Icon="@Icons.Material.Filled.Remove" />
                    </div>
                </td>
            }
        </tr>
    </thead>
</MudSimpleTable> *@
@if (_items != null)
{
    <MudDropContainer T="DropItem" Items="_items" ItemsSelector="@((item,dropzone) => item.Position == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
        <ChildContent>
            <div class="d-flex flex-grow-1 mud-grid">
                @for (int i = 0; i < _columnCount; i++)
                {
                    int index = i;
                    <MudDropZone T="DropItem" 
                        Identifier="@i.ToString()"
                                 Class=@GetClassForDropZoneItem(index)>
                        <MudPaper Square="true">
                        </MudPaper>
                        @* Class=@GetClassForDropZoneItem(i)> *@
                    </MudDropZone>
                }
            </div>
        </ChildContent>
        <ItemRenderer>
            <MudPaper Elevation="25"               
                      onmouseover=@(() => OnFocusHandler(context!.Position, true))
                      onmouseleave=@(() => OnFocusHandler(context!.Position, false))
                Class=@GetClassForItemContainer(int.Parse(context!.Position))>
                <MudIconButton Size="Size.Small" Style="width: 36px; height: 36px" Class=@GetClassForItem(context.Position) OnClick="@(()=>OnClickHandler(context.Position, 1))" Icon="@Icons.Material.Filled.Add" />
                <MudText Align="@Align.Center" Class="align-self-lg-stretch flex-grow-1">@_items.First(i => i.Position == context.Position).DisplayValue</MudText>
                <MudIconButton Style="width: 36px; height: 36px" Class=@GetClassForItem(context.Position) OnClick="(() => OnClickHandler(context.Position, -1)) " Size="@Size.Small" Icon="@Icons.Material.Filled.Remove"  />
            </MudPaper>
        </ItemRenderer>
    </MudDropContainer>
}

@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Position = dropItem.DropzoneIdentifier;
    }

}


