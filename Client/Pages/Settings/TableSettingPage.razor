@using Client.Components.DropZone
@page "/TableSettingPage/{key}"

<h3>@Key</h3>
<MudSimpleTable Bordered="true" Class="overflow-hidden p-4">
    <thead class="d-flex flex-column">
        <tr class="d-flex">
            @foreach (var item in _headersData)
            {
                <td class="mud-grid-item-xs-@item.Position">
                    <div class="d-flex">
                        <MudIconButton Size="Size.Small" Style="width: 36px; height: 36px" Class="align-self-start" Icon="@Icons.Material.Filled.Add" />
                        <MudText Align="@Align.Center" Class="align-self-lg-stretch flex-grow-1">@item.DisplayValue</MudText>
                        <MudIconButton Style="width: 36px; height: 36px" Class="align-self-end" Size="@Size.Small" Icon="@Icons.Material.Filled.Remove" />
                    </div>
                </td>
            }
        </tr>
    </thead>
</MudSimpleTable>

@code {
    int _papers = 7;
    int papers { get { return _papers; } set { UpdatePapers(value); } }

    int[] breaks = new int[7] { 1, 1, 1, 1, 1, 1, 1 };

    void UpdatePapers(int value)
    {

        int[] newbreaks = Enumerable.Repeat(3, value).ToArray();

        for (int i = 0; i < newbreaks.Length; i++)
        {
            if (i < breaks.Length)
            {
                newbreaks[i] = breaks[i];
            }
        }

        breaks = newbreaks;

        _papers = value;

        StateHasChanged();
    }

    void UpdateBreaks(int index, int changeamount)
    {
        List<int> newbreaks = breaks.ToList();
        if (newbreaks[index] + changeamount > 12 || newbreaks[index] + changeamount < 1) return; //don't go above 12 or below 1
        newbreaks[index] += changeamount;

        breaks = newbreaks.ToArray();

        StateHasChanged();
    }
}


